/*
 * PIXI.JS GAME
 * https://adventofcode.com/2021/day/11
 */

PIXI.settings.RESOLUTION = window.devicePixelRatio;
PIXI.settings.SORTABLE_CHILDREN = true;
//                                                         ,
let dumbosImages = [                //   (                /o
  "./images/Octopuses/frame_01.png",//    \,           .o;o'           ,o'o'o.
  "./images/Octopuses/frame_02.png",//   /\o;o,,,,,;o;o;''         _,-o,-'''-o:o.
  "./images/Octopuses/frame_03.png",//    \    'o'o'o''         _,-'o,o'         o
  "./images/Octopuses/frame_04.png",//  .o \.              __,-o o,o'
  "./images/Octopuses/frame_05.png",//  | o o'-..____,,-o'o o_o-'
  "./images/Octopuses/frame_06.png" //     'o.o_o_o_o,o--''
];
let icons = [
  //Github Logo - https://github.com/logos
  "./images/icons/GitHub-Mark.png"
]
let scoreboard, sourcecode;
let dumbosTextureArray = [];
let dumbos = [[]];

// global variables
let speed = 12; // Lower is faster.
let score = 0;
let freezeScore = -1;

let app = new PIXI.Application({
  sharedLoader: true,
  width: window.innerWidth,
  height: window.innerHeight,
  autoDensity: true,
  antialias: true,
  resizeTo: window,
  backgroundColor: 0xD0D0FF
});
document.body.appendChild(app.view);

/* Loading screen */
let load_progress = 0;
let total_files = [
  dumbosImages,
  icons
].map((i) => i.length).reduce((a, b) => a + b, 0);
PIXI.Loader.shared.onProgress.add(() => {
  load_progress += 1;
  document.getElementById("loadingstatus").value = load_progress / total_files * 100;
});
PIXI.Loader.shared.onComplete.add(() => {
  let elem = document.getElementById("loading");
  elem.parentNode.removeChild(elem);
});

/* Load files */
PIXI.Loader.shared
  .add(dumbosImages)
  .add(icons)
  .load(setup);

function octopus(potentialEnergy) {
  function onClick(e) {
    let filter = new PIXI.filters.ColorMatrixFilter();
    filter.hue(Math.floor(Math.random() * 360));
    sprite.filters[1] = filter;
  }

  function illuminate() {
    if (that.flashed) {
      sprite.filters[0].brightness(1);
    } else {
      sprite.filters[0].brightness(that.energy / 11);
    }
  }

  let sprite = new PIXI.AnimatedSprite(dumbosTextureArray);
  sprite.interactive = true;
  sprite.on('pointerdown', onClick);
  sprite.animationSpeed = 0.14;
  sprite.play();

  let filter = new PIXI.filters.ColorMatrixFilter();
  filter.brightness(1);
  sprite.filters = [filter];

  let that = {
    sprite: sprite,
    flashed: false,
    energy: potentialEnergy,
    illuminate: illuminate
  };
  illuminate();
  return that;
}

function resizeElements() {
  // Perform all actions that require the screen size (place things...)
  const playableWidth = app.screen.width - 10;
  const playableHeight = app.screen.height - 10;
  let paddingX = 0;
  let paddingY = 0;
  scoreboard.position.set(playableWidth, playableHeight);
  let r;
  if (playableWidth > playableHeight) {
    r = playableHeight / 10;
    paddingX = (playableWidth - r * 10) / 2
  } else {
    r = playableWidth / 10;
    paddingY = (playableHeight - r * 10) / 2
  }
  sourcecode.position.set(playableWidth, r / 2 + 10);
  for (let row = 0; row < 10; row++) {
    for (let col = 0; col < 10; col++) {
      dumbos[row][col].sprite.width = r;
      dumbos[row][col].sprite.height = r;
      dumbos[row][col].sprite.x = (col * r + 10 + paddingX);
      dumbos[row][col].sprite.y = (row * r + 10 + paddingY);
    }
  }
}

function setup() {
  let init = "5483143223274585471152645561736141336146635738547841675246452176841721688288113448468485545283751526";
  let style = new PIXI.TextStyle({
    fontFamily: "Arial",                     //                             ___                                                                                                                                          
    fontSize: 36,                            //                          .-'   `'.                                                                                                                                
    fill: "white",                           //                         /         \                                                                                                                                 
    dropShadow: true,                        //                         |         ;                                                                                                                                    
    dropShadowColor: "#000000",              //                    Sup  |         |           ___.--,                                                                                                                                         
    dropShadowBlur: 2,                       //                _.._     |0) ~ (0) |    _.---'`__.-( (_.                                                                                                                                   
    dropShadowAngle: Math.PI / 6,            //         __.--'`_.. '.__.\    '--. \_.-' ,.--'`     `""`                                                                                                                                                
    dropShadowDistance: 3,                   //        ( ,.--'`   ',__ /./;   ;, '.__.'`    __                                                                                                                                         
  });                                        //        _`) )  .---.__.' / |   |\   \__..--""  """--.,_                                                                                                                                                                                                  
  scoreboard = new PIXI.Text("", style);     //       `---' .'.''-._.-'`_./  /\ '.  \ _.-~~~````~~~-._`-.__.'                                                                                                                                                       
  scoreboard.zIndex = 2;                     //             | |  .' _.-' |  |  \  \  '.               `~---`                                                                                                                                       
  scoreboard.anchor.x = 1;                   //              \ \/ .'     \  \   '. '-._)                                                                                                                                         
  scoreboard.anchor.y = 1;                   //               \/ /        \  \    `=.__`~-.                                                                                                                                         
  setScore();                                //               / /\         `) )    / / `"".`\                                                                                                                            
  app.stage.addChild(scoreboard);            //         , _.-'.'\ \        / /    ( (     / /                                                                                                                                                
  //                                                    `--~`   ) )    .-'.'      '.'.  | (
  sourcecode = new PIXI.Sprite(PIXI.Texture.from(icons[0]));// (/`    ( (`          ) )  '-;
  sourcecode.zIndex = 2;                     //                 `      '-;         (-' 
  sourcecode.anchor.x = 1;
  sourcecode.anchor.y = 1;
  sourcecode.interactive = true;
  sourcecode.on('pointerdown', function () { window.open('https://github.com/MrOnosa/AdventOfCode2021/tree/main/Day11/Visual', '_blank'); });
  app.stage.addChild(sourcecode);
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[0]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[1]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[0]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[1]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[0]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[1]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[0]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[1]));
  dumbosImages.forEach((i) => {
    dumbosTextureArray.push(PIXI.Texture.from(i));
  });
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[3]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[4]));
  dumbosTextureArray.push(PIXI.Texture.from(dumbosImages[1]));

  // Init dumbo octopuses 
  for (let row = 0; row < 10; row++) {
    dumbos[row] = [];
    for (let col = 0; col < 10; col++) {
      let o = octopus(+init[row * 10 + col]);
      dumbos[row][col] = o;
      app.stage.addChild(o.sprite);
    }
  }
  // Call the resize util (everything related to the size of the screen)
  app.renderer.on('resize', resizeElements);
  resizeElements();

  // Start the game loop
  app.ticker.add(play);
}

let timeUntilNextFrame = speed;
function play(delta) {
  timeUntilNextFrame -= delta;
  if (freezeScore >= 0) {
    freezeScore -= delta;
    if (freezeScore < 0) {
      score = 0;

      // Init dumbo octopuses 
      const newPuzzle = puzzles[Math.floor(Math.random() * puzzles.length)];
      for (let row = 0; row < 10; row++) {
        for (let col = 0; col < 10; col++) {
          dumbos[row][col].energy = +newPuzzle[row * 10 + col];
        }
      }

      resizeElements();
    }
  }
  if (timeUntilNextFrame < 0) {
    timeUntilNextFrame = speed;

    // Gain energy
    for (let row = 0; row < 10; row++) {
      for (let col = 0; col < 10; col++) {
        dumbos[row][col].energy++;
      }
    }

    // Update neighbors
    do {
      {
        {
          for (let row = 0; row < 10; row++) {
            for (let col = 0; col < 10; col++) {
              if (dumbos[row][col].energy > 9 && !dumbos[row][col].flashed) {
                dumbos[row][col].flashed = true;
                for (let acol = col - 1; acol <= col + 1; acol++) {
                  for (let arow = row - 1; arow <= row + 1; arow++) {
                    if (arow >= 0 && arow < 10 && acol >= 0 && acol < 10
                      && (arow != row || acol != col)) {
                      dumbos[arow][acol].energy++;
                    }//                .---.         ,,
                  }  //     ,,        /     \   Hi  ;,,'  
                }    //    ;, ;      (  o  o )      ; ;
              }      //      ;,';,,,  \  \/ /      ,; ;
            }        //   ,,,  ;,,,,;;,`   '-,;'''',,,'
          }          //  ;,, ;,, ,,,,   ,;  ,,,'';;,,;''';
        }            //     ;,,,;    ~~'  '';,,''',,;''''
      }              //                        '''
    } while (dumbos.some(r => r.some(c => c.energy > 9 && !c.flashed)));

    if (freezeScore < 0) {
      freezeScore = dumbos.every(r => r.every(c => c.flashed)) ? speed * 8 : -1;
      score++;
    }

    // Deplete energy reserves
    for (let col = 0; col < 10; col++) {
      for (let row = 0; row < 10; row++) {
        dumbos[row][col].illuminate();
        if (dumbos[row][col].flashed)
          dumbos[row][col].energy = 0;
        dumbos[row][col].flashed = false;
      }
    }
    setScore();
  }
}

function setScore() {
  scoreboard.text = score.toString();
  if (freezeScore >= 0) {
    scoreboard.style.fill = "yellow"
  } else {
    scoreboard.style.fill = "white"
  }
}

const puzzles = [
  "8624818384372547334366183418274573826616835732214268463583177286886112813868511761611242673848415383", //MrOnosa's Puzzle Input
  "6168204593872638174110552928858518561436600003195939172964005174034053790039966774298476572638025244",
  "4153006996628814620129088512282780990245786499738146049790295978725443039862921619376740771032740632",
  "4655259647749593192071702577832249131042655068060941449258654321962726008084432790367990327597791802",
  "1146386797134435159700390493696307619330966180277997494098074922902912797168480586309227129160521695",
  "8629043872747090640548126493540224158373433886794362939793518527730068251613557541375971780690266493",
  "7997279191378888488304704906989738020628491623243257064986678088266407923797389296938188235860316074",
  "9393673112441359739503263026625753775638849887590108619530493604496820401657293223175782232678084439",
  "2329186481500012824346682130226614790469124869688267849744501537258522715694201550218482979424801693",
  "9893305193676471110227888480533261932111166463238012635404969072601018015295020013701361916592727412",
  "8988034589673673964916804047774327672680845454696623717059021883641529611411708287595078270828829798",
  "0974956160940252250934018135878700768244858824274603646292501011928790678947193332169170007480913669",
  "0242459174199065867445663495264520615850790591868697611896335404204761391746736920015367350576438285",
  "3420024033253723148170017430599056036757358777467745962165711812278880972444001752935774530492407772",
  "6382597239591885206476435268916224540535118606304063520782722163581405157580054872432379345199496667",
  "9565558040079548442514664925770526403642745135060714663613590407484380774162935818782245895847142575",
  "5763923000376830143254167788870139807622618133696489236742210664517668829210153165837093839618475294",
  "4503626498266639181623150133095826771459951869188987183039358760134684495020369674712127803762176919",
  "5764962877287267725069152738973713191604535906371186143097081820652308286410316767588043447499378516",
  "1939203750161182040649983268064947747660021244750710913063773587401087342035167593241715013574341462",
  "4538438070207711025765477688912800754696788051471781446224113013392639565551052643931484273598806278",
  "1983993394588215467399109819973799910578228497213119748295920829799559191262995661441904088993330029",
  "3414078487340977786439465220898634737118736450378437532709638927741947462475488529983976609790884916",
  "7306288812003619440976813935114329044573216183007207162243876646721800491343626819699129743552216081",
  "9831630726463162043681851904912837163688616380434616463642956848164811565937026464768940870428543143",
  "6037961664400349961434934633091943360291320876380913737857401428996841836604021593261209041971513046",
  "8365907376124077968581174928995891341769862725293258504149857664088384401208633793837856127172435729",
  "1071786144674416293428018415247123979908681886174955836204937034580806234644363082321715506185284433",
  "8857623573082525149203501218551274571289497710706668990325412025777002419056923559870897743571953907",
  "0817201636583122969107537251913541566766321077215685500957779664559390810106715798602515072137469925",
  "3544680311147573254892170058095773988848808677148288555957905473199845144622639770156167549533114352",
  "5232804167973651826135266767115234495435538976442851797341488283971969482313208388249827201646198153",
  "1608257559455977747820983413518248309830631773785620832968798962055271897501919138881103101742230027",
  "5474924486669309196438604682361859922652563182619935285386040432188452902539899643895178968544125254",
  "0933945331627385440446775249712403387716380173175178825858396395929075128635735693309714439967957220",
  "7127696741683178138081535193607214200712274621442350438212694923743879685238395864335682380528982243",
  "0019492731848254311427823091667545037256128254909850565246000825906280074395909771220069417815503010",
  "4774003669961877753178228243485202876901545482267058850261797314365853364614154826147541798413697470",
  "4275491329551187438356217347228913764612727159069454581365741461389409462372640350104857056330690859",
  "5792022268484102064494602268306248059186674433455812609191361299752372023778469826432649004343670562",
  "4194959394787272347423267246504257564831624311800776265862620793677699394630049034765773540681648902",
  "6083346674950973792644189138116539538133111927245687996606860250772328307731018286909833245023121150",
  "0095993230960865784991858081177627986740109684917075730849666784016003718596852742683222691538517405",
  "6704138149266525464668943452475670031775906650081164912888641588949932679607755676861543715407375969",
  "2786669240883866284993149512902148826774083516701996312626575778571897507706612053871285406252951568",
  "5158088694680566896137681230751332187884582185580282754464871857170746003025649413549399701077301985",
  "6871638583119836375317069016702099369097682524204738151055931636969399888177079467756124214910606430",
  "5021697571567010981158799763247393607987996665968008962351504102128217582773828229019348411166731007",
  "9547574226882543516253851480723100261602192349353862289070555926534995200240324680704012134522356324",
  "0714254543283397978496493288763944178036752181652051632345331365474269360162732535412623258606125992",
  "3053095159302502181042577854135909309688408382380095077126577088149640863807578351673181406964861961",
  "3346494653913618845694518243489530869621642784324008885912702288864949775394204240698374137777799771",
  "3485646382495763457549885318873045576095088988677626691633621624407664519303476115205286264853511480",
  "3360629963975322850196112663360018074405242504699037858693950021248773313729267883216511354863215458",
  "9620113137329818447608161021980450350020214174552647569286554778913265662062585685187599264062644507",
  "3354938537889389499814791925754862019185082395842935743823372434485382297757387593524348833238526897",
  "3145277683128811615762552359580279709554522828937123020889989631708638580649843216797351782134528846",
  "7654823385351726473125911928906832742994540396495225572601095000553992038833973825884638105759028808",
  "3173817813304649599789711953106640185656833539638082997551397248927805337492126063807332824127064619",
  "1412030703380322654619140100933086469469785621727742832336071461531336398084046381816363640591050048",
  "4709658630296400117439720953175283766024840631760451226206111364832929969521333470946382789421622161",
  "1249153685086194738602593650792664484732754457918484461151491296450691469083030895750179997966960607",
  "2084437669144661863695405662377607175732495153168351600992186439583795790469095786477783906073926474",
  "4988672270068446893845982461932069997882788337697555764790375871304821725369309582449022457833319599",
  "6273575820681988564220704622788356987750069314743745012721373992701042731095734506798820643286365251",
  "6643858015021734446573411259105239114735574403755626753268066981151777387498913936003577197846496278",
  "2280548577826540966101437004783436264013903493285037106967758563716660457482793853007626288344388841",
  "9176063302846794133901185655146190431090291751144922869107553703756300035725971154564940601958587431",
  "8009469978749389217960926251740377572390674866432914352151338297668866162433789693967633590297469260",
  "2262922664681790264014392108864565628254707660645391727830916723395975293200756421689777834744679932",
  "8221720825548916991182435798546734897039775699439522073685366411767575963795790900758282916436041291",
  "3553897624203160706677772438349733229445300311345451063819981673156338252970204296821789114913142560",
  "6535534191591388744266895102957704173987230753175282382938987519350289105070626524443872593188229591",
  "8496595788166516605241638220162703042880084984501535158363857876766263213808130200296701931291752803",
  "3223673017690167975249255680268636684883013405682439900977076627485898754955574344464194828429418462",
  "5436431228991128675166607140038594009125145999390687178037026602462777905881730834746382019036653095",
  "3699277752856162740934389047198133058450018234201689054392575858041782297127939075610792488002847931",
  "1234905347828957807323161308795749226489846180622893082689141148205925649446333810181739771782712184",
  "6698690907753065772825008682984156780153756045918382571847770149224985366626809083933174847906833705",
  "1466372541469053201740754482279462436584753594033275429826027367174880840605179773781033636501293631",
  "4783210693266654747133477146909948982769313588113895557114748020361417340710762422892584934212312910",
  "7236773300860945573553049951007964455690004991971085090577201715611899113555852009670602629003591854",
  "2844826763726060726350968109745467758091199548486629346614961453343948551097241290226666697669714258",
  "5604491102553587363146168162591806472657432002778493771921691089103729385613681673891234204301096905",
  "9356916668662713922303522515514241332230009707468457795695434347843957718145564049329664771046715766",
  "1572916062181417129184875181161527176251172994689065165563767660504049331279462683520535855012990341",
  "2974736000133158583012026656268424400390905909326085913059358353225478410208146103965592437300124522",
  "6331821737555311798177336819794395848644817690689547105131997393203089204200026628633210137223105105",
  "2253979888042768352682892210359855297531906740490802930724634648203431214657383765258298034788069988",
  "8681064586454762675526320897533921693322296120705812360869399575963143165948078199615126850621402852",
  "7387724388660864421203087122444815242828708859628484265273284417651536724303189701284232020547735808",
  "1647954321034997239453423487536454564362869796840967252529156630386437725320156879550858203641674760",
  "4281077652902970707605478566794410323034029070395109122433645006678290637414292410209796983106160442",
  "9642806734600482435753037955034204590073577564211631933259294954220933451138332152882599529445194438",
  "5381187535401352001353620796630941251094824430270456091527274918836542203757449845975566728394156064",
  "5817360325193185582427052166655671205683398562096176785105120656532405286033941808445916344862934169",
  "9039891172158798309033450013651653730747565709758020471113266838496369956012870296423803361292838606",
  "9315740002647514902866400069011971809863275400869186121639468682349844202243253368278347619988541727",
  "0359590266188942342207888168240701637462377837929148250174928479997374838284304035013777298345370068",
  "4760709852047377434378418088290278386302595536828256786777962743722043263347334808924894135050907724",
  "9516056573082389057060057372642376163286395270905191222252833188534304201282351643695820926281365768"];